// Dirichlet boundary should be labelled 1
verbosity = 0;

load "Morley"
load "iovtk"

real Lx = 100*1e-3; // Lenghts of the long and short sides of the plate, [m]
real Ly = 20*1e-3;
real rAccel = 4e-3; // Radius of the accelerometer [m]
real offsetAccelX = 5e-3; // Positions of the center of the accelerometer
real offsetAccelY = 5e-3; // Positions of the center of the accelerometer
// Test point for AFC measurment
real xtest = offsetAccelX;
real ytest = offsetAccelY; // Should be 0 !!!!!
real eps = 1e-8;

// These parameters control the mesh coarsity
// ny is the number of mesh nods on the short side
// nAccel -- on the border of the area occupied by the accelerometer
int ny = 3;
int nx = 15*ny;
int nAccel = 4*ny;

border C1(t=0., 1){x=0; y=Ly/2. - t*Ly; label=0;}
border C2(t=0., 1){x=Lx*t; y=-Ly/2.; label=0;}
border C3(t=0., 1){x=Lx; y=-Ly/2. + t*Ly; label=1;} // This side (one of the short sides) is clamped (u = du/dn = 0)
border C4(t=0., 1){x=(1-t)*Lx; y=Ly/2.; label=0;}

// boundary of the area occupied by the accelerometer
//
border CAccel(t=0., 2*pi){x=offsetAccelX + rAccel*cos(t); y=0 + rAccel*sin(t); label=0;}

mesh Th = buildmesh(C1(3*ny) + C2(nx) + C3(3*ny) + C4(nx) + CAccel(nAccel));
//savevtk("mesh.vtu", Th);

func indAccel = 0.5*(1. + sign(rAccel^2 + eps - (x - offsetAccelX)^2 - (y - offsetAccelY)^2));
